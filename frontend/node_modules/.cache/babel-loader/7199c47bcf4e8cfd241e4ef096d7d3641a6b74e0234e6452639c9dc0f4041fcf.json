{"ast":null,"code":"import React,{useEffect,useState}from'react';import{CSSTransition,TransitionGroup}from'react-transition-group';import SlideImage from'../components/SlideImage';import SlideText from'../components/SlideText';import{v4 as uuidv4}from'uuid';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Slideshow=()=>{const[slideData,setSlideData]=useState({image:'',text:[],'text-color':'white','transition-effect':'fade','transition-time':20});const[socket,setSocket]=useState(null);const[slideKey,setSlideKey]=useState(uuidv4());useEffect(()=>{// Create WebSocket connection - always connect to backend server on port 8080\nconst protocol=window.location.protocol==='https:'?'wss:':'ws:';// Force connection to the backend server on port 8080\nconst wsUrl=\"\".concat(protocol,\"//localhost:8080/ws\");const ws=new WebSocket(wsUrl);// Set up WebSocket event handlers\nws.onopen=()=>{console.log('WebSocket connected');};ws.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('Received slide data:',data);// Generate a new key for transition when data changes\nsetSlideKey(uuidv4());setSlideData(data);}catch(error){console.error('Error parsing WebSocket data:',error);}};ws.onerror=error=>{console.error('WebSocket error:',error);};ws.onclose=()=>{console.log('WebSocket disconnected');};// Set WebSocket instance to state\nsetSocket(ws);// Clean up WebSocket connection on unmount\nreturn()=>{if(ws){ws.close();}};},[]);// Get transition class name based on effect\nconst getTransitionClassName=()=>{const effect=slideData['transition-effect']||'fade';if(effect==='slide'){return'slide-effect';}return'fade';};// Get transition duration based on slideshow data\nconst getTransitionDuration=()=>{const transitionTime=slideData['transition-time']||20;return transitionTime*100;// Convert to milliseconds\n};return/*#__PURE__*/_jsx(\"div\",{className:\"slideshow-container\",children:/*#__PURE__*/_jsx(TransitionGroup,{children:/*#__PURE__*/_jsx(CSSTransition,{timeout:getTransitionDuration(),classNames:getTransitionClassName(),children:/*#__PURE__*/_jsxs(\"div\",{className:\"slide\",children:[/*#__PURE__*/_jsx(SlideImage,{imageData:slideData.image}),/*#__PURE__*/_jsx(SlideText,{text:slideData.text,textColor:slideData['text-color']})]})},slideKey)})});};export default Slideshow;","map":{"version":3,"names":["React","useEffect","useState","CSSTransition","TransitionGroup","SlideImage","SlideText","v4","uuidv4","jsx","_jsx","jsxs","_jsxs","Slideshow","slideData","setSlideData","image","text","socket","setSocket","slideKey","setSlideKey","protocol","window","location","wsUrl","concat","ws","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","error","onerror","onclose","close","getTransitionClassName","effect","getTransitionDuration","transitionTime","className","children","timeout","classNames","imageData","textColor"],"sources":["/Users/vibin/slideshow-master/frontend/src/pages/Slideshow.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport SlideImage from '../components/SlideImage';\nimport SlideText from '../components/SlideText';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Slideshow = () => {\n  const [slideData, setSlideData] = useState({\n    image: '',\n    text: [],\n    'text-color': 'white',\n    'transition-effect': 'fade',\n    'transition-time': 20\n  });\n  const [socket, setSocket] = useState(null);\n  const [slideKey, setSlideKey] = useState(uuidv4());\n\n  useEffect(() => {\n    // Create WebSocket connection - always connect to backend server on port 8080\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    // Force connection to the backend server on port 8080\n    const wsUrl = `${protocol}//localhost:8080/ws`;\n    const ws = new WebSocket(wsUrl);\n\n    // Set up WebSocket event handlers\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('Received slide data:', data);\n        // Generate a new key for transition when data changes\n        setSlideKey(uuidv4());\n        setSlideData(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket data:', error);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n\n    // Set WebSocket instance to state\n    setSocket(ws);\n\n    // Clean up WebSocket connection on unmount\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Get transition class name based on effect\n  const getTransitionClassName = () => {\n    const effect = slideData['transition-effect'] || 'fade';\n    if (effect === 'slide') {\n      return 'slide-effect';\n    }\n    return 'fade';\n  };\n  \n  // Get transition duration based on slideshow data\n  const getTransitionDuration = () => {\n    const transitionTime = slideData['transition-time'] || 20;\n    return transitionTime * 100; // Convert to milliseconds\n  };\n\n  return (\n    <div className=\"slideshow-container\">\n      <TransitionGroup>\n        <CSSTransition\n          key={slideKey}\n          timeout={getTransitionDuration()}\n          classNames={getTransitionClassName()}\n        >\n          <div className=\"slide\">\n            <SlideImage imageData={slideData.image} />\n            <SlideText text={slideData.text} textColor={slideData['text-color']} />\n          </div>\n        </CSSTransition>\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Slideshow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}