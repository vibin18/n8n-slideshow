{"ast":null,"code":"var _jsxFileName = \"/Users/vibin/slideshow-master/frontend/src/components/SlideText.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\n\n// List of available Google Fonts to use\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst googleFonts = ['Roboto', 'Open Sans', 'Lato', 'Montserrat', 'Oswald', 'Raleway', 'Playfair Display', 'Dancing Script', 'Pacifico'];\n\n// Web-safe fonts as fallbacks\nconst webSafeFonts = ['Arial', 'Verdana', 'Helvetica', 'Tahoma', 'Georgia', 'Times New Roman', 'Courier New'];\nconst SlideText = ({\n  text,\n  textColor\n}) => {\n  _s();\n  // Load Google Fonts when component mounts\n  useEffect(() => {\n    // Only load fonts once\n    const linkId = 'google-fonts-link';\n    if (!document.getElementById(linkId)) {\n      const fontsList = googleFonts.join('|').replace(/ /g, '+');\n      const link = document.createElement('link');\n      link.id = linkId;\n      link.rel = 'stylesheet';\n      link.href = `https://fonts.googleapis.com/css?family=${fontsList}&display=swap`;\n      document.head.appendChild(link);\n    }\n  }, []);\n  if (!text || text.length === 0) {\n    return null;\n  }\n\n  // Generate a font family string with appropriate fallbacks\n  const getFontFamily = font => {\n    if (!font) return \"'Arial', sans-serif\";\n\n    // Check if it's a Google font or web-safe font\n    const isGoogleFont = googleFonts.some(gf => gf.toLowerCase() === font.toLowerCase());\n    const isWebSafeFont = webSafeFonts.some(wf => wf.toLowerCase() === font.toLowerCase());\n    if (isGoogleFont || isWebSafeFont) {\n      return `'${font}', sans-serif`;\n    }\n\n    // Default fallback\n    return `'${font}', 'Arial', sans-serif`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: text.map((textItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slide-text\",\n      style: {\n        top: `${textItem.y}px`,\n        left: `${textItem.x}px`,\n        fontSize: `${textItem.fontSize || 16}px`,\n        fontFamily: getFontFamily(textItem.font),\n        color: textColor || 'white'\n      },\n      children: textItem.content\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n\n// Export the component and the fonts list for reuse\n_s(SlideText, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SlideText;\nexport { googleFonts, webSafeFonts };\nexport default SlideText;\nvar _c;\n$RefreshReg$(_c, \"SlideText\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","googleFonts","webSafeFonts","SlideText","text","textColor","_s","linkId","document","getElementById","fontsList","join","replace","link","createElement","id","rel","href","head","appendChild","length","getFontFamily","font","isGoogleFont","some","gf","toLowerCase","isWebSafeFont","wf","children","map","textItem","index","className","style","top","y","left","x","fontSize","fontFamily","color","content","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vibin/slideshow-master/frontend/src/components/SlideText.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\n// List of available Google Fonts to use\nconst googleFonts = [\n  'Roboto',\n  'Open Sans',\n  'Lato',\n  'Montserrat',\n  'Oswald',\n  'Raleway',\n  'Playfair Display',\n  'Dancing Script',\n  'Pacifico'\n];\n\n// Web-safe fonts as fallbacks\nconst webSafeFonts = [\n  'Arial',\n  'Verdana',\n  'Helvetica',\n  'Tahoma',\n  'Georgia',\n  'Times New Roman',\n  'Courier New'\n];\n\nconst SlideText = ({ text, textColor }) => {\n  // Load Google Fonts when component mounts\n  useEffect(() => {\n    // Only load fonts once\n    const linkId = 'google-fonts-link';\n    if (!document.getElementById(linkId)) {\n      const fontsList = googleFonts.join('|').replace(/ /g, '+');\n      const link = document.createElement('link');\n      link.id = linkId;\n      link.rel = 'stylesheet';\n      link.href = `https://fonts.googleapis.com/css?family=${fontsList}&display=swap`;\n      document.head.appendChild(link);\n    }\n  }, []);\n  \n  if (!text || text.length === 0) {\n    return null;\n  }\n\n  // Generate a font family string with appropriate fallbacks\n  const getFontFamily = (font) => {\n    if (!font) return \"'Arial', sans-serif\";\n    \n    // Check if it's a Google font or web-safe font\n    const isGoogleFont = googleFonts.some(gf => gf.toLowerCase() === font.toLowerCase());\n    const isWebSafeFont = webSafeFonts.some(wf => wf.toLowerCase() === font.toLowerCase());\n    \n    if (isGoogleFont || isWebSafeFont) {\n      return `'${font}', sans-serif`;\n    }\n    \n    // Default fallback\n    return `'${font}', 'Arial', sans-serif`;\n  };\n\n  return (\n    <>\n      {text.map((textItem, index) => (\n        <div\n          key={index}\n          className=\"slide-text\"\n          style={{\n            top: `${textItem.y}px`,\n            left: `${textItem.x}px`,\n            fontSize: `${textItem.fontSize || 16}px`,\n            fontFamily: getFontFamily(textItem.font),\n            color: textColor || 'white'\n          }}\n        >\n          {textItem.content}\n        </div>\n      ))}\n    </>\n  );\n};\n\n// Export the component and the fonts list for reuse\nexport { googleFonts, webSafeFonts };\nexport default SlideText;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}