{"ast":null,"code":"var _jsxFileName = \"/Users/vibin/slideshow-master/frontend/src/pages/Slideshow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport SlideImage from '../components/SlideImage';\nimport SlideText from '../components/SlideText';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Slideshow = () => {\n  _s();\n  const [slideData, setSlideData] = useState({\n    image: '',\n    text: [],\n    'text-color': 'white',\n    'transition-effect': 'fade',\n    'transition-time': 20\n  });\n  const [socket, setSocket] = useState(null);\n  const [slideKey, setSlideKey] = useState(uuidv4());\n  useEffect(() => {\n    // Create WebSocket connection - always connect to backend server on port 8080\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    // Force connection to the backend server on port 8080\n    const wsUrl = `${protocol}//localhost:8080/ws`;\n    const ws = new WebSocket(wsUrl);\n\n    // Set up WebSocket event handlers\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('Received slide data:', data);\n        // Generate a new key for transition when data changes\n        setSlideKey(uuidv4());\n        setSlideData(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket data:', error);\n      }\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n\n    // Set WebSocket instance to state\n    setSocket(ws);\n\n    // Clean up WebSocket connection on unmount\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Get transition class name based on effect\n  const getTransitionClassName = () => {\n    const effect = slideData['transition-effect'] || 'fade';\n    if (effect === 'slide') {\n      return 'slide-effect';\n    }\n    return 'fade';\n  };\n\n  // Get transition duration based on slideshow data\n  const getTransitionDuration = () => {\n    const transitionTime = slideData['transition-time'] || 20;\n    return transitionTime * 100; // Convert to milliseconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slideshow-container\",\n    children: /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n        timeout: getTransitionDuration(),\n        classNames: getTransitionClassName(),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slide\",\n          children: [/*#__PURE__*/_jsxDEV(SlideImage, {\n            imageData: slideData.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SlideText, {\n            text: slideData.text,\n            textColor: slideData['text-color']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, slideKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Slideshow, \"YFp1C7KITopD8RU2S4TUzyEsU9c=\");\n_c = Slideshow;\nexport default Slideshow;\nvar _c;\n$RefreshReg$(_c, \"Slideshow\");","map":{"version":3,"names":["React","useEffect","useState","CSSTransition","TransitionGroup","SlideImage","SlideText","v4","uuidv4","jsxDEV","_jsxDEV","Slideshow","_s","slideData","setSlideData","image","text","socket","setSocket","slideKey","setSlideKey","protocol","window","location","wsUrl","ws","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","error","onerror","onclose","close","getTransitionClassName","effect","getTransitionDuration","transitionTime","className","children","timeout","classNames","imageData","fileName","_jsxFileName","lineNumber","columnNumber","textColor","_c","$RefreshReg$"],"sources":["/Users/vibin/slideshow-master/frontend/src/pages/Slideshow.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport SlideImage from '../components/SlideImage';\nimport SlideText from '../components/SlideText';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Slideshow = () => {\n  const [slideData, setSlideData] = useState({\n    image: '',\n    text: [],\n    'text-color': 'white',\n    'transition-effect': 'fade',\n    'transition-time': 20\n  });\n  const [socket, setSocket] = useState(null);\n  const [slideKey, setSlideKey] = useState(uuidv4());\n\n  useEffect(() => {\n    // Create WebSocket connection - always connect to backend server on port 8080\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    // Force connection to the backend server on port 8080\n    const wsUrl = `${protocol}//localhost:8080/ws`;\n    const ws = new WebSocket(wsUrl);\n\n    // Set up WebSocket event handlers\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('Received slide data:', data);\n        // Generate a new key for transition when data changes\n        setSlideKey(uuidv4());\n        setSlideData(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket data:', error);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n\n    // Set WebSocket instance to state\n    setSocket(ws);\n\n    // Clean up WebSocket connection on unmount\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Get transition class name based on effect\n  const getTransitionClassName = () => {\n    const effect = slideData['transition-effect'] || 'fade';\n    if (effect === 'slide') {\n      return 'slide-effect';\n    }\n    return 'fade';\n  };\n  \n  // Get transition duration based on slideshow data\n  const getTransitionDuration = () => {\n    const transitionTime = slideData['transition-time'] || 20;\n    return transitionTime * 100; // Convert to milliseconds\n  };\n\n  return (\n    <div className=\"slideshow-container\">\n      <TransitionGroup>\n        <CSSTransition\n          key={slideKey}\n          timeout={getTransitionDuration()}\n          classNames={getTransitionClassName()}\n        >\n          <div className=\"slide\">\n            <SlideImage imageData={slideData.image} />\n            <SlideText text={slideData.text} textColor={slideData['text-color']} />\n          </div>\n        </CSSTransition>\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Slideshow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}